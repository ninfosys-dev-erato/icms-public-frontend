// Employee types for the slider sidebar
export interface EmployeePhoto {
  id: string;
  employeeId?: string;
  fileName?: string;
  originalName?: string;
  url: string;
  presignedUrl?: string; // Optional as it's generated by the service
  fileId?: string;
  size?: number;
  mimetype?: string; // Backend uses mimetype
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Employee {
  id: string;
  name: {
    en: string;
    ne: string;
  };
  position: {
    en: string;
    ne: string;
  };
  department: {
    id: string;
    departmentName: {
      en: string;
      ne: string;
    };
    parentId: string | null;
    departmentHeadId: string | null;
    order: number;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
  };
  photo: {
    id: string;
    fileName: string;
    originalName: string;
    url: string;
    fileId: string;
    size: number;
    contentType: string;
    uploadedBy: string;
    folder: string;
    category: string;
    altText: string;
    title: string;
    description: string;
    tags: string[];
    isPublic: boolean;
    isActive: boolean;
    metadata: {
      depth: string;
      space: string;
      width: number;
      format: string;
      height: number;
      density: number;
      channels: number;
      hasAlpha: boolean;
      hasProfile: boolean;
    };
    createdAt: string;
    updatedAt: string;
  };
  presignedUrl: string;
  isActive: boolean;
  order: number;
  mobileNumber: string;
  telephone: string;
  email: string;
  roomNumber: string;
  createdAt: string;
  updatedAt: string;
}

export interface EmployeeFilter {
  page?: number;
  limit?: number;
  search?: string;
  departmentId?: string;
  position?: string;
  isActive?: boolean;
  locale?: 'ne' | 'en';
}

export interface EmployeePhotosResponse {
  data: Employee[]; // Backend returns 'data' not 'employees'
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
  meta?: {
    timestamp: string;
    version: string;
    requestId: string;
  };
}

export interface EmployeeSearchResponse {
  employees: Employee[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
  hasNext: boolean;
  hasPrev: boolean;
}

export interface EmployeeStatistics {
  totalEmployees: number;
  activeEmployees: number;
  departments: Array<{
    id: string;
    name: Record<string, string>;
    count: number;
  }>;
  positions: Array<{
    position: string;
    localizedName: Record<string, string>;
    count: number;
  }>;
}

// Error types
export interface EmployeeError {
  code: string;
  message: string;
  details?: any;
}
